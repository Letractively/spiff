<div width="100%"
     class="control_section"
     xmlns:py="http://genshi.edgewall.org/"
     xmlns:xi="http://www.w3.org/2001/XInclude">
<script src="$plugin_dir/table.js" type="text/javascript"></script>

<table class="layout_canvas" width="100%">
  <tbody id="layout_canvas">
    <tr>
      <td align="center">
        ${txt('Drag and drop your content here')}
      </td>
    </tr>
  </tbody>
</table>

<script type="text/javascript">
// <![CDATA[
editor = new TableEditor(document.getElementById('layout_canvas'));

// Called whenever an item is dragged over the canvas.
// Highlights the cell over which the item was dropped and
// removes highlighting from all others.
last_highlighted = null;
function on_hover(draggable, droppable) {
  if (droppable == last_highlighted)
    return;

  // Remove old highlighting.
  if (last_highlighted) {
    var class = last_highlighted.getAttribute('class');
    var end   = class.lastIndexOf(' ');
    var last  = class.substr(end + 1);
    if (last == 'highlight')
      last_highlighted.setAttribute('class', class.substring(0, end));
    last_highlighted = null;
  }

  // Ignore cells that need not be highlighted.
  var editor = document.getElementById('content_editor');
  if (droppable == editor)
    return;
  var class = droppable.getAttribute('class');
  if (class == 'layout_occupied')
    return;

  // Highlight.
  droppable.setAttribute('class', class + ' highlight');
  last_highlighted = droppable;
}

// Called whenever an item was dropped on the canvas.
function on_drop(draggable, droppable) {
  var class = droppable.getAttribute('class');
  var row   = droppable.parentNode;
  if (class.match(/layout_occupied/))
    return;

  // Attach the content to the cell.
  droppable.style.height     = '100px';
  droppable.style.width      = '100%';  //FIXME: Use plugin recommendation.
  droppable.style.background = '';
  droppable.innerHTML        = draggable.getAttribute('id');
  droppable.setAttribute('class', 'layout_occupied');

  // If we have only one cell, add four drag targets around the layout.
  if (editor.get_n_rows() == 1 && editor.get_n_columns() == 1) {
    var header = editor.add_row_before(row);
    var footer = editor.add_row_before();
    var right  = editor.add_column_before();
    var left   = editor.add_column_before(droppable);

    make_cells_droppable();
    return true;
  }
  
  // If something was inserted into a horizontal box, split it to add a new
  // drop target.
  var pos = editor.find_cell(droppable);
  if (pos[1] == 1)
    editor.hsplit_cell(droppable);

  // We may have created new cells, so make the whole table droppable again.
  make_cells_droppable();
  return true;
}

function make_cells_droppable() {
  // We need a way to remove the highlighting of a cell, but there is no
  // signal that notifies us when the cursor leaves a cell. Thus, we
  // choose to receive signals whenever the cursor is anywhere in the
  // content editor.
  Droppables.add('content_editor', {
    accept:  'layout_control',
    onHover: on_hover
  });

  // Redefine all IDs and remove existing items from the Droppables list.
  var targets = Array();
  for (var i = 0; i < editor.tbody.rows.length; i++) {
    for (var j = 0; j < editor.tbody.rows[i].cells.length; j++) {
      var td = editor.tbody.rows[i].cells[j];
      var id = 'droppable_' + i.toString() + '_' + j.toString();
      Droppables.remove(id);
      td.setAttribute('id', id);
      targets.push(td);
    }
  }

  // Make the elements droppable.
  for (var i = 0; i < targets.length; i++) {
    var td = targets[i];
    var id = td.getAttribute('id');
    if (td.innerHTML == '')
      td.setAttribute('class', 'layout_droppable');
    Droppables.add(id, {
      accept:  'layout_control',
      greedy:  true,
      onHover: on_hover,
      onDrop:  on_drop
    });
  }
}

make_cells_droppable();
// ]]>
</script>
</div>
