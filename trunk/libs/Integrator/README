Spiff Integrator
-----------------
This library is part of the Spiff platform.

Spiff Integrator is the most important part of the Spiff platform.
Because most of Spiff's functionality is built around this component,
it is very important to get it right.
The library performs the following tasks:

   - Installing plugins.
   - Deleting plugins.
   - Ensuring that dependencies between plugins are consistent at
     any given time.
   - Loading plugins when they are needed.
   - Unloading plugins when they are no longer needed.
   - It provides a facility over which plugins can communicate with
     each other.
   - It provides a facility that controls which kind of communication
     may or may not be taken between plugins.

Spiff Integrator may also run plugins inside of a sandbox, and apply
permission restrictions to them. This functionality will only be added
at a later time, however.


Dependencies
-------------
- sqlalchemy
- Spiff Guard


Use Case: User installs one extra extension
-------------------------------------------
* User opens a sub-page.
* Spiff finds the extension that renders that page.
* Spiff calls Manager.load(InstallPageRenderer)
* ...
* InstallPageRenderer shows an installation form.
* User uploads a new extension through that form.
* Extension emits "InstallPageRenderer:install_request/filename"
* Spiff fetches the signal, calls Manager.install(MyExtension).
* Manager parses the header of MyExtension. The header contains:
   - a list of dependencies.
   - a list of possible signals.
   - a list of events that it needs to retrieve.
* Manager makes sure all dependencies exist. (they do)
* Manager passes the URI of all events to Spiff, requesting whether
  the URI might be retrieved by MyExtension.
* Spiff decides that MyExtension may fetch any signals that were emitted
  from within the users own web space. So it manipulates the event URIs in
  a way that only permit that, e.g. it prefixes the URI with
  "user_123_web_space:".
* Manager registers the callbacks.


Use Case: Web page consisting of multiple plugins
-------------------------------------------------
- A user opens a Spiff web page in his browser.
- Spiff looks up the handle of the extension that is to be displayed.
- Spiff instantiates the Spiff Integrator.Manager.
- Spiff calls Manager.load(extension_handle) 
- Manager looks up the dependencies of the extension.
- Manager loads the extension and all dependencies in the right order.
- Manager instantiates the extension, passing the ExtensionApi to the
  constructor.
- Manager returns a reference to the extension instance.
- Spiff requests the extension instance to render a web page.
- The extension emits a "handle:i/have/rendered" signal through the
  ExtensionApi.
- Manager delegates the decision of whether the signal is permitted
  to Spiff.
- Spiff permits the signal, possibly prefixing the URI with
  "user_123_web_space:".
- Manager looks up which extensions are subscribed to that signal, finds
  one.
- Manager loads the extension, if not done already.
- Manager emits the signal on the EventBus.
- The extension fetches the signal, does something.
- ...


Design
-------
* Manager class: This is the core public API, providing the client with methods
  for installing and uninstalling plugins, and configuring any options of them.
  Before an extension is installed, the Manager determines the dependencies of
  the extension and ensures that they are fullfilled.
  It also retrieves a list of all EventBus signals to which the extension would
  like to subscribe. It then delegates the decision of whether permission to
  access the events is granted to the client (=whoever owns the manager).

* DB class: The list of installed plugins, dependencies, callbacks and other
  properties are stored within the database. This class abstracts the database
  from the rest of the library.

* Extension class: Represents any plugin. An extension has a list of
  dependencies. Dependencies may be grouped into contexts, such as "runtime"
  or "install_time" dependencies. Spiff Integrator only ever checks the
  dependencies within each context, dependencies across multiple contexts are
  unchecked.

  Extensions need a way to interface with Spiff Integrator, and they also
  need a way to interface with other extensions. That's where the ExtensionApi
  object comes in.

* ExtensionApi class: This defines the interface that may be used by extensions.
  It also provides secure (authenticated) access to the EventBus.
  An object of this type is passed to the constructor of the plugin, and any
  interaction with Spiff Integrator or other plugins should be done through
  this API. The following is provided:
  
  - Controlled, secure access to the global EventBus.
  - ...

* EventBus class: Extensions may send signals, or listen to signals emitted by
  the EventBus, if the have the permission to do so. The EventBus does not
  provide authentication mechanisms that prevent

* Callback class: A callback is a function owned by an Extension that is hooked
  into a specific EventBus signal.


Extension Design
----------------

* Extensions have headers consisting out of comments.
* Fields in the header:
   - extension name
   - extension handle (ascii name without special chars)
   - extension version
   - extension author
   - extension description
   - a list of all runtime dependencies
   - a list of all install time dependencies
   - a list of all event URIs that the extension might want to subscribe to.

Events to which the extension might want to subscribe:

- Any time any page is opened, regardless of whether the extension
  is integrated into that site.
  event_uri: "always", cb: on_page_open
- Any time a specified page is opened.
  event_uri: "site:/path/to/page/*", cb: on_page_open
- Any time a page is opened that loads a specified extension.
  event_uri: "extension:handle=version", cb: on_page_open


Examples
---------
For example plugins please refer to the files in the samples/ directory.
There is also inline API documentation embedded into all Spiff Integrator
source files. The unit test at the bottom of each source file can also be
a useful reference.
