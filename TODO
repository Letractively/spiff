* Create Spiff's main function that instantiates the Integrator and
  instructs it to load the appropriate extensions.

* Make the login extension work.

* Check string escaping in HTML templates.

* Port Admin Center extension to Python.

* Install default plugins using the installer, and assign them to
  the default pages.

* Create Spiff core extension.

* Check permissions of user actions in the admin UI.

* Gettextify the admin interface.

* Create a navigation bar ("breadcrumbs") extension.

* Delete orphaned users.

* Handle invalid/duplicate user/group names.

* Decide how to lay out multiple plugins on one site.
  - Create layout containers? (Straight forward, but how can we hide
    complexity in simple cases?)
  - Define fixed locations depending on the plugin? (Unflexible)
  - Let plugins configure this (Non-intuitive? Too complex in complex
    cases?)

* Define the plugin API. Stuff that should be easy to do for plugins:
  - Using the authentication framework.
  - Storing configuration and sharing them with other plugins.
    (Should this be done by a simple library that wraps database access?
     Should plugins be responsible to handle this themselves?)
  - Communication with other plugins. (And avoid the problems introduced
    by a synchronous bus.)
  - ...

* Implement login for the admin GUI. This should be done as a plugin!

* Create an admin GUI for content management. Essentially, this GUI
  is our "Plugin Central", where the user can add different plugins
  into his website.
